<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/(home)/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/(home)/index.tsx" />
              <option name="originalContent" value="import BottomNavigation, { NavItem } from &quot;@/components/BottomNavigation&quot;;&#10;import ChallengeCard from &quot;@/components/ChallengeCard&quot;;&#10;import Header from &quot;@/components/Header&quot;;&#10;import ProfileCard from &quot;@/components/ProfileCard&quot;;&#10;import RecommendedTaskCard from &quot;@/components/RecommendedTaskCard&quot;;&#10;import { SignOutButton } from &quot;@/components/SignOutButton&quot;;&#10;import { useUser } from '@clerk/clerk-expo';&#10;import {router} from &quot;expo-router&quot;;&#10;import React, {useEffect} from &quot;react&quot;;&#10;import { ScrollView, StyleSheet, Text, View } from &quot;react-native&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;import useUserStore from &quot;@/store/userStore&quot;;&#10;import {userSelector} from &quot;@/store/userStore&quot;;&#10;import {initUserSelector} from &quot;@/store/userStore&quot;;&#10;&#10;&#10;const recommendedTasks = [&#10;    {&#10;        id: &quot;1&quot;,&#10;        title: &quot;Einkaufen gehen&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1567306226416-28f0efdc88ce&quot;,&#10;    },&#10;    {&#10;        id: &quot;2&quot;,&#10;        title: &quot;Kurzer Spaziergang&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1503341455253-b2e723bb3dbb&quot;,&#10;    },&#10;    {&#10;        id: &quot;3&quot;,&#10;        title: &quot;Licht ausschalten&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1510626176961-4b57d4fbad03&quot;,&#10;    },&#10;];&#10;&#10;const HomeScreen: React.FC = () =&gt; {&#10;    const navItems: NavItem[] = [&#10;        { label: &quot;Home&quot;, icon: &quot;home&quot;, isActive: true },&#10;        { label: &quot;Aufgaben&quot;, icon: &quot;list&quot;, onPress: () =&gt; router.push(&quot;./tasks&quot;) },&#10;        { label: &quot;Fortschritt&quot;, icon: &quot;bar-chart&quot;, onPress: () =&gt; router.push(&quot;./progress&quot;) },&#10;    ];&#10;    const { user } = useUser()&#10;    const initUser = useUserStore(initUserSelector);&#10;    const userData = useUserStore(userSelector);&#10;&#10;    useEffect(() =&gt; {&#10;        if (user?.id) {&#10;            initUser(user.id);&#10;        }&#10;    }, [user?.id]);&#10;&#10;    return (&#10;        &lt;SafeAreaView style={styles.container} edges={[&quot;top&quot;]}&gt;&#10;            &lt;Header title=&quot;Home&quot; /&gt;&#10;&#10;            &lt;ScrollView style={styles.content} contentContainerStyle={{ gap: 16 }}&gt;&#10;                &lt;View className=&quot;flex-row justify-between&quot;&gt;&#10;                    &lt;ProfileCard&#10;                    name={user?.firstName + &quot; &quot; + user?.lastName || user?.emailAddresses[0]?.emailAddress || &quot;Benutzer&quot;}&#10;                    points={userData.points} // punkte vom userStore geholt&#10;                    badges={7}&#10;                    imageUrl={user?.imageUrl || &quot;&quot;}&#10;                    /&gt;&#10;                    &lt;SignOutButton /&gt;&#10;                &lt;/View&gt;&#10;                &#10;                &#10;                &lt;Text style={styles.sectionTitle}&gt;Empfohlene Aufgaben&lt;/Text&gt;&#10;                &lt;ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.horizontalList}&gt;&#10;                    {recommendedTasks.map((task) =&gt; (&#10;                        &lt;RecommendedTaskCard&#10;                            key={task.id}&#10;                            title={task.title}&#10;                            imageUrl={task.imageUrl}&#10;                            taskId={task.id}&#10;                        /&gt;&#10;                    ))}&#10;                &lt;/ScrollView&gt;&#10;&#10;                &lt;Text style={styles.sectionTitle}&gt;Aktuelle Challenges&lt;/Text&gt;&#10;                &lt;ChallengeCard&#10;                    title=&quot;10.000 Schritte schaffen&quot;&#10;                    subtitle=&quot;Bleibe heute aktiv!&quot;&#10;                    expires=&quot;läuft noch 5 Stunden&quot;&#10;                    imageUrl=&quot;https://images.unsplash.com/photo-1506744038136-46273834b3fb&quot;&#10;                    onStart={() =&gt; router.push(&quot;/challengedetail&quot;)}&#10;                /&gt;&#10;                &lt;ChallengeCard&#10;                    title=&quot;Wasser trinken&quot;&#10;                    subtitle=&quot;Trinke 2 Liter heute&quot;&#10;                    expires=&quot;läuft noch 12 Stunden&quot;&#10;                    imageUrl=&quot;https://images.unsplash.com/photo-1510626176961-4b57d4fbad03&quot;&#10;                    onStart={() =&gt; router.push(&quot;/challengedetail&quot;)}&#10;                /&gt;&#10;&#10;            &lt;/ScrollView&gt;&#10;&#10;            &lt;BottomNavigation items={navItems} /&gt;&#10;        &lt;/SafeAreaView&gt;&#10;    );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;    container: { flex: 1, backgroundColor: &quot;#f9fbfa&quot; },&#10;    content: { flex: 1, paddingHorizontal: 16, paddingTop: 8 },&#10;    sectionTitle: {&#10;        fontSize: 18,&#10;        fontWeight: &quot;bold&quot;,&#10;        color: &quot;#0e1a13&quot;,&#10;        paddingTop: 16,&#10;        paddingBottom: 4,&#10;        paddingHorizontal: 4,&#10;    },&#10;    horizontalList: {&#10;        paddingLeft: 4,&#10;    },&#10;});&#10;&#10;export default HomeScreen;" />
              <option name="updatedContent" value="import BottomNavigation, { NavItem } from &quot;@/components/BottomNavigation&quot;;&#10;import ChallengeCard from &quot;@/components/ChallengeCard&quot;;&#10;import Header from &quot;@/components/Header&quot;;&#10;import ProfileCard from &quot;@/components/ProfileCard&quot;;&#10;import RecommendedTaskCard from &quot;@/components/RecommendedTaskCard&quot;;&#10;import { SignOutButton } from &quot;@/components/SignOutButton&quot;;&#10;import { useUser } from '@clerk/clerk-expo';&#10;import {router} from &quot;expo-router&quot;;&#10;import React, {useEffect} from &quot;react&quot;;&#10;import { ScrollView, StyleSheet, Text, View } from &quot;react-native&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;import useUserStore from &quot;@/store/userStore&quot;;&#10;import {userSelector} from &quot;@/store/userStore&quot;;&#10;import {initUserSelector} from &quot;@/store/userStore&quot;;&#10;&#10;&#10;const recommendedTasks = [&#10;    {&#10;        id: &quot;1&quot;,&#10;        title: &quot;Einkaufen gehen&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1567306226416-28f0efdc88ce&quot;,&#10;    },&#10;    {&#10;        id: &quot;2&quot;,&#10;        title: &quot;Kurzer Spaziergang&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1503341455253-b2e723bb3dbb&quot;,&#10;    },&#10;    {&#10;        id: &quot;3&quot;,&#10;        title: &quot;Licht ausschalten&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1510626176961-4b57d4fbad03&quot;,&#10;    },&#10;];&#10;&#10;const HomeScreen: React.FC = () =&gt; {&#10;    const navItems: NavItem[] = [&#10;        { label: &quot;Home&quot;, icon: &quot;home&quot;, isActive: true },&#10;        { label: &quot;Aufgaben&quot;, icon: &quot;list&quot;, onPress: () =&gt; router.push(&quot;./tasks&quot;) },&#10;        { label: &quot;Fortschritt&quot;, icon: &quot;bar-chart&quot;, onPress: () =&gt; router.push(&quot;./progress&quot;) },&#10;    ];&#10;    const { user } = useUser()&#10;    const initUser = useUserStore(initUserSelector);&#10;    const userData = useUserStore(userSelector);&#10;&#10;    useEffect(() =&gt; {&#10;        if (user?.id) {&#10;            initUser(user.id);&#10;        }&#10;    }, [user?.id]);&#10;&#10;    return (&#10;        &lt;SafeAreaView style={styles.container} edges={[&quot;top&quot;]}&gt;&#10;            &lt;Header title=&quot;Home&quot; /&gt;&#10;&#10;            &lt;ScrollView style={styles.content} contentContainerStyle={{ gap: 16 }}&gt;&#10;                &lt;View className=&quot;flex-row justify-between&quot;&gt;&#10;                    &lt;ProfileCard&#10;                    name={user?.firstName + &quot; &quot; + user?.lastName || user?.emailAddresses[0]?.emailAddress || &quot;Benutzer&quot;}&#10;                    points={userData?.points || 0} // Null-Check hinzugefügt mit Fallback zu 0&#10;                    badges={7}&#10;                    imageUrl={user?.imageUrl || &quot;&quot;}&#10;                    /&gt;&#10;                    &lt;SignOutButton /&gt;&#10;                &lt;/View&gt;&#10;                &#10;                &#10;                &lt;Text style={styles.sectionTitle}&gt;Empfohlene Aufgaben&lt;/Text&gt;&#10;                &lt;ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.horizontalList}&gt;&#10;                    {recommendedTasks.map((task) =&gt; (&#10;                        &lt;RecommendedTaskCard&#10;                            key={task.id}&#10;                            title={task.title}&#10;                            imageUrl={task.imageUrl}&#10;                            taskId={task.id}&#10;                        /&gt;&#10;                    ))}&#10;                &lt;/ScrollView&gt;&#10;&#10;                &lt;Text style={styles.sectionTitle}&gt;Aktuelle Challenges&lt;/Text&gt;&#10;                &lt;ChallengeCard&#10;                    title=&quot;10.000 Schritte schaffen&quot;&#10;                    subtitle=&quot;Bleibe heute aktiv!&quot;&#10;                    expires=&quot;läuft noch 5 Stunden&quot;&#10;                    imageUrl=&quot;https://images.unsplash.com/photo-1506744038136-46273834b3fb&quot;&#10;                    onStart={() =&gt; router.push(&quot;/challengedetail&quot;)}&#10;                /&gt;&#10;                &lt;ChallengeCard&#10;                    title=&quot;Wasser trinken&quot;&#10;                    subtitle=&quot;Trinke 2 Liter heute&quot;&#10;                    expires=&quot;läuft noch 12 Stunden&quot;&#10;                    imageUrl=&quot;https://images.unsplash.com/photo-1510626176961-4b57d4fbad03&quot;&#10;                    onStart={() =&gt; router.push(&quot;/challengedetail&quot;)}&#10;                /&gt;&#10;&#10;            &lt;/ScrollView&gt;&#10;&#10;            &lt;BottomNavigation items={navItems} /&gt;&#10;        &lt;/SafeAreaView&gt;&#10;    );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;    container: { flex: 1, backgroundColor: &quot;#f9fbfa&quot; },&#10;    content: { flex: 1, paddingHorizontal: 16, paddingTop: 8 },&#10;    sectionTitle: {&#10;        fontSize: 18,&#10;        fontWeight: &quot;bold&quot;,&#10;        color: &quot;#0e1a13&quot;,&#10;        paddingTop: 16,&#10;        paddingBottom: 4,&#10;        paddingHorizontal: 4,&#10;    },&#10;    horizontalList: {&#10;        paddingLeft: 4,&#10;    },&#10;});&#10;&#10;export default HomeScreen;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/server.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/server.js" />
              <option name="originalContent" value="import express from 'express';&#10;import { drizzle } from 'drizzle-orm/neon-http';&#10;import { neon } from '@neondatabase/serverless';&#10;import {desc, eq} from 'drizzle-orm';&#10;import { users } from './src/db/schema.js';&#10;import dotenv from 'dotenv';&#10;import { createClerkClient } from '@clerk/backend'&#10;dotenv.config();&#10;const clerkClient = createClerkClient({ secretKey: process.env.CLERK_SECRET_KEY })&#10;&#10;// DATABASE_URL überprüfen&#10;if (!process.env.DATABASE_URL) {&#10;    throw new Error('DATABASE_URL environment variable is required');&#10;}&#10;&#10;// Neon Client erstellen und dann Drizzle initialisieren&#10;const sql = neon(process.env.DATABASE_URL);&#10;const db = drizzle(sql);&#10;&#10;const app = express();&#10;app.use(express.json());&#10;app.listen(5001, () =&gt; { console.log('Server is running on port 5001'); });&#10;&#10;app.get('/', (req, res) =&gt; {&#10;    res.send('Welcome to the EcoQuest');&#10;});&#10;&#10;/*&#10;app.post('/api/clerk-webhook', async (req, res) =&gt; {&#10;    const event = req.body;&#10;&#10;    if (event.type === 'user.created') {&#10;        const clerkUserId = event.data.id;&#10;&#10;        try {&#10;            // in die users-Tabelle einfügen&#10;            await db.insert(userTable).values({&#10;                id: clerkUserId,&#10;                points: 0,&#10;            });&#10;&#10;            return res.status(200).json({ success: true });&#10;        } catch (err) {&#10;            console.error('Fehler beim Einfügen:', err);&#10;            return res.status(500).json({ error: 'DB insert failed' });&#10;        }&#10;    }&#10;&#10;    res.status(200).json({ received: true });&#10;});*/&#10;&#10;&#10;app.post('/user/init', async (req, res) =&gt; {&#10;    const { userId } = req.body;&#10;&#10;    if (!userId) return res.status(400).json({ error: 'No userId provided' });&#10;&#10;    try {&#10;        const existing = await db.select().from(users).where(eq(users.id, userId));&#10;&#10;        if (existing.length === 0) {&#10;           const [createdUser] = await db.insert(users).values({&#10;                id: userId,&#10;                points: 0,&#10;            }).returning();&#10;            console.log('Created new user:', createdUser);&#10;            return res.json(createdUser);&#10;        }&#10;        console.log('Found existing user:', existing[0]);&#10;        return res.json(existing[0]);&#10;&#10;    } catch (err) {&#10;        console.error(err);&#10;        res.status(500).json({ error: 'Database error' });&#10;    }&#10;});&#10;&#10;/*app.get('/user', async (req, res) =&gt; {&#10;    const { userId } = req.query;&#10;    const user = await db.select().from(users).where(eq(users.id, userId));&#10;    if (user.length === 0) {&#10;        return res.status(404).json({ error: 'User not found' });&#10;    }&#10;    return res.json(user[0]);&#10;})*/&#10;&#10;app.patch('/add-points', async (req, res) =&gt; {&#10;    const { userId, points } = req.body;&#10;&#10;            .where(eq(users.id, userId));&#10;" />
              <option name="updatedContent" value="import express from 'express';&#10;import { drizzle } from 'drizzle-orm/neon-http';&#10;import { neon } from '@neondatabase/serverless';&#10;import {desc, eq} from 'drizzle-orm';&#10;import { users } from './src/db/schema.js';&#10;import dotenv from 'dotenv';&#10;import { createClerkClient } from '@clerk/backend'&#10;dotenv.config();&#10;const clerkClient = createClerkClient({ secretKey: process.env.CLERK_SECRET_KEY })&#10;&#10;// DATABASE_URL überprüfen&#10;if (!process.env.DATABASE_URL) {&#10;    throw new Error('DATABASE_URL environment variable is required');&#10;}&#10;&#10;// Neon Client erstellen und dann Drizzle initialisieren&#10;const sql = neon(process.env.DATABASE_URL);&#10;const db = drizzle(sql);&#10;&#10;const app = express();&#10;app.use(express.json());&#10;app.listen(5001, () =&gt; { console.log('Server is running on port 5001'); });&#10;&#10;app.get('/', (req, res) =&gt; {&#10;    res.send('Welcome to the EcoQuest');&#10;});&#10;&#10;/*&#10;app.post('/api/clerk-webhook', async (req, res) =&gt; {&#10;    const event = req.body;&#10;&#10;    if (event.type === 'user.created') {&#10;        const clerkUserId = event.data.id;&#10;&#10;        try {&#10;            // in die users-Tabelle einfügen&#10;            await db.insert(userTable).values({&#10;                id: clerkUserId,&#10;                points: 0,&#10;            });&#10;&#10;            return res.status(200).json({ success: true });&#10;        } catch (err) {&#10;            console.error('Fehler beim Einfügen:', err);&#10;            return res.status(500).json({ error: 'DB insert failed' });&#10;        }&#10;    }&#10;&#10;    res.status(200).json({ received: true });&#10;});*/&#10;&#10;&#10;app.post('/user/init', async (req, res) =&gt; {&#10;    const { userId } = req.body;&#10;&#10;    if (!userId) return res.status(400).json({ error: 'No userId provided' });&#10;&#10;    try {&#10;        const existing = await db.select().from(users).where(eq(users.id, userId));&#10;&#10;        if (existing.length === 0) {&#10;           const [createdUser] = await db.insert(users).values({&#10;                id: userId,&#10;                points: 0,&#10;            }).returning();&#10;            console.log('Created new user:', createdUser);&#10;            return res.json(createdUser);&#10;        }&#10;        console.log('Found existing user:', existing[0]);&#10;        return res.json(existing[0]);&#10;&#10;    } catch (err) {&#10;        console.error(err);&#10;        res.status(500).json({ error: 'Database error' });&#10;    }&#10;});&#10;&#10;/*app.get('/user', async (req, res) =&gt; {&#10;    const { userId } = req.query;&#10;    const user = await db.select().from(users).where(eq(users.id, userId));&#10;    if (user.length === 0) {&#10;        return res.status(404).json({ error: 'User not found' });&#10;    }&#10;    return res.json(user[0]);&#10;})*/&#10;&#10;app.patch('/add-points', async (req, res) =&gt; {&#10;    const { userId, points } = req.body;&#10;&#10;    if (!userId || points === undefined) {&#10;        return res.status(400).json({ error: 'userId and points are required' });&#10;    }&#10;&#10;    try {&#10;        // Zuerst den aktuellen Benutzer holen&#10;        const currentUser = await db.select().from(users).where(eq(users.id, userId));&#10;        &#10;        if (currentUser.length === 0) {&#10;            return res.status(404).json({ error: 'User not found' });&#10;        }&#10;&#10;        // Punkte berechnen und aktualisieren&#10;        const newPoints = currentUser[0].points + points;&#10;        &#10;        const result = await db&#10;            .update(users)&#10;            .set({ points: newPoints })&#10;            .where(eq(users.id, userId))&#10;            .returning();&#10;&#10;        console.log(`Added ${points} points to user ${userId}. New total: ${newPoints}`);&#10;        &#10;        res.status(200).json({ &#10;            status: 'ok', &#10;            user: result[0],&#10;            pointsAdded: points &#10;        });&#10;    } catch (err) {&#10;        console.error('Error adding points:', err);&#10;        res.status(500).json({ error: 'Database error, could not add points' });&#10;    }&#10;})&#10;&#10;app.get(&quot;/leaderboard&quot;, async (req, res) =&gt; {&#10;    try {&#10;        console.log(&quot;Leaderboard request received&quot;);&#10;&#10;        // 1. Hole nur die Top 3 User sortiert nach Punkten&#10;        const pointsData = await db&#10;            .select()&#10;            .from(users)&#10;            .orderBy(desc(users.points))&#10;            .limit(3);&#10;&#10;        console.log(&quot;Points data from DB:&quot;, pointsData);&#10;&#10;        if (pointsData.length === 0) {&#10;            return res.json([]);&#10;        }&#10;&#10;        // 2. Clerk-Daten für diese IDs holen&#10;        const clerkIds = pointsData.map(u =&gt; u.id);&#10;        console.log(&quot;Clerk IDs to fetch:&quot;, clerkIds);&#10;&#10;        let clerkUsers = [];&#10;        try {&#10;            // Verbesserter Clerk API-Aufruf&#10;            for (const userId of clerkIds) {&#10;                try {&#10;                    const clerkUser = await clerkClient.users.getUser(userId);&#10;                    clerkUsers.push(clerkUser);&#10;                } catch (clerkError) {&#10;                    console.warn(`Could not fetch Clerk user ${userId}:`, clerkError.message);&#10;                    // Fallback-Benutzer erstellen&#10;                    clerkUsers.push({&#10;                        id: userId,&#10;                        firstName: 'Unbekannt',&#10;                        lastName: '',&#10;                        imageUrl: null&#10;                    });&#10;                }&#10;            }&#10;        } catch (clerkError) {&#10;            console.error(&quot;Clerk API error:&quot;, clerkError);&#10;            // Fallback: Leaderboard ohne Clerk-Daten erstellen&#10;            const leaderboard = pointsData.map((u, index) =&gt; ({&#10;                clerkUserId: u.id,&#10;                points: u.points,&#10;                name: `Benutzer ${index + 1}`,&#10;                imageUrl: null,&#10;            }));&#10;            return res.json(leaderboard);&#10;        }&#10;&#10;        // 3. Zusammenführen&#10;        const leaderboard = pointsData.map(u =&gt; {&#10;            const clerkUser = clerkUsers.find(cu =&gt; cu.id === u.id);&#10;            return {&#10;                clerkUserId: u.id,&#10;                points: u.points,&#10;                name: `${clerkUser?.firstName ?? &quot;Unbekannt&quot;} ${clerkUser?.lastName ?? &quot;&quot;}`.trim(),&#10;                imageUrl: clerkUser?.imageUrl || null,&#10;            };&#10;        });&#10;&#10;        console.log(&quot;Final leaderboard:&quot;, leaderboard);&#10;        res.json(leaderboard);&#10;    } catch (error) {&#10;        console.error(&quot;Fehler beim Erstellen der Rangliste:&quot;, error);&#10;        console.error(&quot;Error stack:&quot;, error.stack);&#10;        res.status(500).json({ error: &quot;Interner Serverfehler&quot;, details: error.message });&#10;    }&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;ecoquest&quot;,&#10;  &quot;main&quot;: &quot;expo-router/entry&quot;,&#10;  &quot;version&quot;: &quot;1.0.0&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;start&quot;: &quot;expo start&quot;,&#10;    &quot;reset-project&quot;: &quot;node ./scripts/reset-project.js&quot;,&#10;    &quot;android&quot;: &quot;DARK_MODE=media DARK_MODE=media expo start --android&quot;,&#10;    &quot;ios&quot;: &quot;DARK_MODE=media DARK_MODE=media expo start --ios&quot;,&#10;    &quot;web&quot;: &quot;DARK_MODE=media DARK_MODE=media expo start --web&quot;,&#10;    &quot;lint&quot;: &quot;expo lint&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@clerk/clerk-expo&quot;: &quot;^2.14.13&quot;,&#10;    &quot;@expo-google-fonts/be-vietnam-pro&quot;: &quot;^0.4.0&quot;,&#10;    &quot;@expo/vector-icons&quot;: &quot;^14.1.0&quot;,&#10;    &quot;@gluestack-ui/button&quot;: &quot;^1.0.14&quot;,&#10;    &quot;@gluestack-ui/divider&quot;: &quot;^0.1.10&quot;,&#10;    &quot;@gluestack-ui/icon&quot;: &quot;^0.1.27&quot;,&#10;    &quot;@gluestack-ui/nativewind-utils&quot;: &quot;^1.0.26&quot;,&#10;    &quot;@gluestack-ui/overlay&quot;: &quot;^0.1.22&quot;,&#10;    &quot;@gluestack-ui/toast&quot;: &quot;^1.0.9&quot;,&#10;    &quot;@legendapp/motion&quot;: &quot;^2.4.0&quot;,&#10;    &quot;@react-navigation/bottom-tabs&quot;: &quot;^7.3.10&quot;,&#10;    &quot;@react-navigation/elements&quot;: &quot;^2.3.8&quot;,&#10;    &quot;@react-navigation/native&quot;: &quot;^7.1.6&quot;,&#10;    &quot;axios&quot;: &quot;^1.11.0&quot;,&#10;    &quot;babel-plugin-module-resolver&quot;: &quot;^5.0.2&quot;,&#10;    &quot;expo&quot;: &quot;~53.0.20&quot;,&#10;    &quot;expo-audio&quot;: &quot;~0.4.8&quot;,&#10;    &quot;expo-auth-session&quot;: &quot;^6.2.1&quot;,&#10;    &quot;expo-blur&quot;: &quot;~14.1.5&quot;,&#10;    &quot;expo-constants&quot;: &quot;~17.1.7&quot;,&#10;    &quot;expo-dev-client&quot;: &quot;~5.2.4&quot;,&#10;    &quot;expo-font&quot;: &quot;~13.3.2&quot;,&#10;    &quot;expo-haptics&quot;: &quot;~14.1.4&quot;,&#10;    &quot;expo-image&quot;: &quot;~2.4.0&quot;,&#10;    &quot;expo-linking&quot;: &quot;~7.1.7&quot;,&#10;    &quot;expo-router&quot;: &quot;~5.1.4&quot;,&#10;    &quot;expo-secure-store&quot;: &quot;^14.2.3&quot;,&#10;    &quot;expo-splash-screen&quot;: &quot;~0.30.10&quot;,&#10;    &quot;expo-status-bar&quot;: &quot;~2.2.3&quot;,&#10;    &quot;expo-symbols&quot;: &quot;~0.4.5&quot;,&#10;    &quot;expo-system-ui&quot;: &quot;~5.0.10&quot;,&#10;    &quot;expo-web-browser&quot;: &quot;~14.2.0&quot;,&#10;    &quot;immer&quot;: &quot;^10.1.1&quot;,&#10;    &quot;lucide-react-native&quot;: &quot;^0.536.0&quot;,&#10;    &quot;nativewind&quot;: &quot;^4.1.23&quot;,&#10;    &quot;prettier-plugin-tailwindcss&quot;: &quot;^0.5.14&quot;,&#10;    &quot;react&quot;: &quot;19.0.0&quot;,&#10;    &quot;react-dom&quot;: &quot;19.0.0&quot;,&#10;    &quot;react-native&quot;: &quot;0.79.5&quot;,&#10;    &quot;react-native-css-interop&quot;: &quot;^0.1.22&quot;,&#10;    &quot;react-native-gesture-handler&quot;: &quot;~2.24.0&quot;,&#10;    &quot;react-native-reanimated&quot;: &quot;~3.17.4&quot;,&#10;    &quot;react-native-safe-area-context&quot;: &quot;^5.6.0&quot;,&#10;    &quot;react-native-screens&quot;: &quot;~4.11.1&quot;,&#10;    &quot;react-native-svg&quot;: &quot;^15.2.0&quot;,&#10;    &quot;react-native-web&quot;: &quot;~0.20.0&quot;,&#10;    &quot;react-native-webview&quot;: &quot;13.13.5&quot;,&#10;    &quot;rive-react-native&quot;: &quot;^9.5.0&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^3.4.17&quot;,&#10;    &quot;zustand&quot;: &quot;^5.0.7&quot;,&#10;    &quot;@shopify/flash-list&quot;: &quot;1.7.6&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@babel/core&quot;: &quot;^7.25.2&quot;,&#10;    &quot;@types/react&quot;: &quot;~19.0.10&quot;,&#10;    &quot;eslint&quot;: &quot;^9.25.0&quot;,&#10;    &quot;eslint-config-expo&quot;: &quot;~9.2.0&quot;,&#10;    &quot;jscodeshift&quot;: &quot;^0.15.2&quot;,&#10;    &quot;typescript&quot;: &quot;~5.8.3&quot;&#10;  },&#10;  &quot;private&quot;: true,&#10;  &quot;packageManager&quot;: &quot;yarn@1.22.22+sha512.a6b2f7906b721bba3d67d4aff083df04dad64c399707841b7acf00f6b133b7ac24255f2652fa22ae3534329dc6180534e98d17432037ff6fd140556e2bb3137e&quot;&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;ecoquest&quot;,&#10;  &quot;main&quot;: &quot;expo-router/entry&quot;,&#10;  &quot;version&quot;: &quot;1.0.0&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;start&quot;: &quot;expo start&quot;,&#10;    &quot;reset-project&quot;: &quot;node ./scripts/reset-project.js&quot;,&#10;    &quot;android&quot;: &quot;DARK_MODE=media DARK_MODE=media expo start --android&quot;,&#10;    &quot;ios&quot;: &quot;DARK_MODE=media DARK_MODE=media expo start --ios&quot;,&#10;    &quot;web&quot;: &quot;DARK_MODE=media DARK_MODE=media expo start --web&quot;,&#10;    &quot;lint&quot;: &quot;expo lint&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@clerk/clerk-expo&quot;: &quot;^2.14.13&quot;,&#10;    &quot;@expo-google-fonts/be-vietnam-pro&quot;: &quot;^0.4.0&quot;,&#10;    &quot;@expo/vector-icons&quot;: &quot;^14.1.0&quot;,&#10;    &quot;@gluestack-ui/button&quot;: &quot;^1.0.14&quot;,&#10;    &quot;@gluestack-ui/divider&quot;: &quot;^0.1.10&quot;,&#10;    &quot;@gluestack-ui/icon&quot;: &quot;^0.1.27&quot;,&#10;    &quot;@gluestack-ui/nativewind-utils&quot;: &quot;^1.0.26&quot;,&#10;    &quot;@gluestack-ui/overlay&quot;: &quot;^0.1.22&quot;,&#10;    &quot;@gluestack-ui/toast&quot;: &quot;^1.0.9&quot;,&#10;    &quot;@legendapp/motion&quot;: &quot;^2.4.0&quot;,&#10;    &quot;@react-navigation/bottom-tabs&quot;: &quot;^7.3.10&quot;,&#10;    &quot;@react-navigation/elements&quot;: &quot;^2.3.8&quot;,&#10;    &quot;@react-navigation/native&quot;: &quot;^7.1.6&quot;,&#10;    &quot;axios&quot;: &quot;^1.11.0&quot;,&#10;    &quot;babel-plugin-module-resolver&quot;: &quot;^5.0.2&quot;,&#10;    &quot;expo&quot;: &quot;~53.0.20&quot;,&#10;    &quot;expo-audio&quot;: &quot;~0.4.8&quot;,&#10;    &quot;expo-auth-session&quot;: &quot;^6.2.1&quot;,&#10;    &quot;expo-blur&quot;: &quot;~14.1.5&quot;,&#10;    &quot;expo-constants&quot;: &quot;~17.1.7&quot;,&#10;    &quot;expo-dev-client&quot;: &quot;~5.2.4&quot;,&#10;    &quot;expo-font&quot;: &quot;~13.3.2&quot;,&#10;    &quot;expo-haptics&quot;: &quot;~14.1.4&quot;,&#10;    &quot;expo-image&quot;: &quot;~2.4.0&quot;,&#10;    &quot;expo-linking&quot;: &quot;~7.1.7&quot;,&#10;    &quot;expo-router&quot;: &quot;~5.1.4&quot;,&#10;    &quot;expo-secure-store&quot;: &quot;^14.2.3&quot;,&#10;    &quot;expo-splash-screen&quot;: &quot;~0.30.10&quot;,&#10;    &quot;expo-status-bar&quot;: &quot;~2.2.3&quot;,&#10;    &quot;expo-symbols&quot;: &quot;~0.4.5&quot;,&#10;    &quot;expo-system-ui&quot;: &quot;~5.0.10&quot;,&#10;    &quot;expo-web-browser&quot;: &quot;~14.2.0&quot;,&#10;    &quot;immer&quot;: &quot;^10.1.1&quot;,&#10;    &quot;lucide-react-native&quot;: &quot;^0.536.0&quot;,&#10;    &quot;nativewind&quot;: &quot;^4.1.23&quot;,&#10;    &quot;prettier-plugin-tailwindcss&quot;: &quot;^0.5.14&quot;,&#10;    &quot;react&quot;: &quot;19.0.0&quot;,&#10;    &quot;react-dom&quot;: &quot;19.0.0&quot;,&#10;    &quot;react-native&quot;: &quot;0.79.5&quot;,&#10;    &quot;react-native-css-interop&quot;: &quot;^0.1.22&quot;,&#10;    &quot;react-native-gesture-handler&quot;: &quot;~2.24.0&quot;,&#10;    &quot;react-native-reanimated&quot;: &quot;~3.17.4&quot;,&#10;    &quot;react-native-safe-area-context&quot;: &quot;^5.6.0&quot;,&#10;    &quot;react-native-screens&quot;: &quot;~4.11.1&quot;,&#10;    &quot;react-native-svg&quot;: &quot;^15.2.0&quot;,&#10;    &quot;react-native-web&quot;: &quot;~0.20.0&quot;,&#10;    &quot;react-native-webview&quot;: &quot;13.13.5&quot;,&#10;    &quot;rive-react-native&quot;: &quot;^9.5.0&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^3.4.17&quot;,&#10;    &quot;zustand&quot;: &quot;^5.0.7&quot;,&#10;    &quot;@shopify/flash-list&quot;: &quot;^2.0.2&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@babel/core&quot;: &quot;^7.25.2&quot;,&#10;    &quot;@types/react&quot;: &quot;~19.0.10&quot;,&#10;    &quot;eslint&quot;: &quot;^9.25.0&quot;,&#10;    &quot;eslint-config-expo&quot;: &quot;~9.2.0&quot;,&#10;    &quot;jscodeshift&quot;: &quot;^0.15.2&quot;,&#10;    &quot;typescript&quot;: &quot;~5.8.3&quot;&#10;  },&#10;  &quot;private&quot;: true,&#10;  &quot;packageManager&quot;: &quot;yarn@1.22.22+sha512.a6b2f7906b721bba3d67d4aff083df04dad64c399707841b7acf00f6b133b7ac24255f2652fa22ae3534329dc6180534e98d17432037ff6fd140556e2bb3137e&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/store/userStore.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/store/userStore.js" />
              <option name="originalContent" value="import {create} from 'zustand';&#10;import axios from 'axios';&#10;import { immer } from 'zustand/middleware/immer'&#10;&#10;const useUserStore = create(&#10;    immer((set, get) =&gt; ({&#10;      //states&#10;      user: null,&#10;&#10;      //actions&#10;      addPoints: async (points) =&gt; {&#10;        set((state) =&gt; {state.user.points += points});&#10;&#10;        try {&#10;          await axios.patch('http://192.168.0.2:5001/add-points', {&#10;            userId: get().user.id,&#10;            points: points&#10;          });&#10;        } catch (error) {&#10;          console.error('Error adding points:', error);&#10;        }&#10;      },&#10;      initUser: async (userId) =&gt; {&#10;        try {&#10;            const response = await axios.post('http://192.168.0.2:5001/user/init', {&#10;                userId: userId,&#10;            })&#10;            console.log(response.data);&#10;            set((state) =&gt; {state.user = response.data });&#10;        } catch (error) {&#10;          console.error('Error initializing user:', error);&#10;        }&#10;      }&#10;&#10;&#10;&#10;    })&#10;));&#10;&#10;export const userSelector = (state) =&gt; state.user;&#10;export const addPointsSelector = (state) =&gt; state.addPoints;&#10;export const initUserSelector = (state) =&gt; state.initUser;&#10;export default useUserStore;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="import {create} from 'zustand';&#10;import axios from 'axios';&#10;import { immer } from 'zustand/middleware/immer'&#10;&#10;const useUserStore = create(&#10;    immer((set, get) =&gt; ({&#10;      //states&#10;      user: null,&#10;&#10;      //actions&#10;      addPoints: async (points) =&gt; {&#10;        set((state) =&gt; {state.user.points += points});&#10;&#10;        try {&#10;          await axios.patch('http://192.168.0.2:5001/add-points', {&#10;            userId: get().user.id,&#10;            points: points&#10;          });&#10;        } catch (error) {&#10;          console.error('Error adding points:', error);&#10;        }&#10;      },&#10;      initUser: async (userId) =&gt; {&#10;        try {&#10;            const response = await axios.post('http://192.168.0.2:5001/user/init', {&#10;                userId: userId,&#10;            })&#10;            console.log(response.data);&#10;            set((state) =&gt; {state.user = response.data });&#10;        } catch (error) {&#10;          console.error('Error initializing user:', error);&#10;        }&#10;      }&#10;&#10;&#10;&#10;    })&#10;));&#10;&#10;export const userSelector = (state) =&gt; state.user;&#10;export const addPointsSelector = (state) =&gt; state.addPoints;&#10;export const initUserSelector = (state) =&gt; state.initUser;&#10;export default useUserStore;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/babel.config.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/babel.config.js" />
              <option name="originalContent" value="module.exports = function (api) {&#10;  api.cache(true);&#10;  api.cache(true);&#10;  return {&#10;    presets: [&#10;      [&quot;babel-preset-expo&quot;, { jsxImportSource: &quot;nativewind&quot; }],&#10;      &quot;nativewind/babel&quot;,&#10;      &quot;nativewind/babel&quot;&#10;    ],&#10;&#10;    plugins: [[&quot;module-resolver&quot;, {&#10;      root: [&quot;./&quot;],&#10;&#10;      alias: {&#10;        &quot;@&quot;: &quot;./&quot;,&#10;        &quot;tailwind.config&quot;: &quot;./tailwind.config.js&quot;&#10;      }&#10;    }]]&#10;  };&#10;};&#10;" />
              <option name="updatedContent" value="module.exports = function (api) {&#10;  api.cache(true);&#10;  return {&#10;    presets: [&#10;      [&quot;babel-preset-expo&quot;, { jsxImportSource: &quot;nativewind&quot; }],&#10;      &quot;nativewind/babel&quot;&#10;    ],&#10;&#10;    plugins: [[&quot;module-resolver&quot;, {&#10;      root: [&quot;./&quot;],&#10;&#10;      alias: {&#10;        &quot;@&quot;: &quot;./&quot;,&#10;        &quot;tailwind.config&quot;: &quot;./tailwind.config.js&quot;&#10;      }&#10;    }]]&#10;  };&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/server.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/server.js" />
              <option name="originalContent" value="import express from 'express';&#10;import { drizzle } from 'drizzle-orm/neon-http';&#10;import { neon } from '@neondatabase/serverless';&#10;import { eq } from 'drizzle-orm';&#10;import { users } from './src/db/schema.js';&#10;import dotenv from 'dotenv';&#10;dotenv.config();&#10;&#10;// DATABASE_URL überprüfen&#10;if (!process.env.DATABASE_URL) {&#10;    throw new Error('DATABASE_URL environment variable is required');&#10;}&#10;&#10;// Neon Client erstellen und dann Drizzle initialisieren&#10;const sql = neon(process.env.DATABASE_URL);&#10;const db = drizzle(sql);&#10;&#10;const app = express();&#10;app.use(express.json());&#10;app.listen(5001, () =&gt; { console.log('Server is running on port 5001'); });&#10;&#10;app.get('/', (req, res) =&gt; {&#10;    res.send('Welcome to the EcoQuest');&#10;});&#10;&#10;/*&#10;app.post('/api/clerk-webhook', async (req, res) =&gt; {&#10;    const event = req.body;&#10;&#10;    if (event.type === 'user.created') {&#10;        const clerkUserId = event.data.id;&#10;&#10;        try {&#10;            // in die users-Tabelle einfügen&#10;            await db.insert(userTable).values({&#10;                id: clerkUserId,&#10;                points: 0,&#10;            });&#10;&#10;            return res.status(200).json({ success: true });&#10;        } catch (err) {&#10;            console.error('Fehler beim Einfügen:', err);&#10;            return res.status(500).json({ error: 'DB insert failed' });&#10;        }&#10;    }&#10;&#10;    res.status(200).json({ received: true });&#10;});*/&#10;&#10;&#10;app.post('/api/user/init', async (req, res) =&gt; {&#10;    const { userId } = req.body;&#10;&#10;    if (!userId) return res.status(400).json({ error: 'No userId provided' });&#10;&#10;    try {&#10;        const existing = await db.select().from(users).where(users.id.eq(userId));&#10;&#10;        if (existing.length === 0) {&#10;            await db.insert(users).values({&#10;                id: userId,&#10;                points: 0,&#10;            });&#10;        }&#10;&#10;        res.status(200).json({ status: 'ok' });&#10;    } catch (err) {&#10;        console.error(err);&#10;        res.status(500).json({ error: 'Database error' });&#10;    }&#10;});&#10;" />
              <option name="updatedContent" value="import express from 'express';&#10;import { drizzle } from 'drizzle-orm/neon-http';&#10;import { neon } from '@neondatabase/serverless';&#10;import { eq } from 'drizzle-orm';&#10;import { users } from './src/db/schema.js';&#10;import dotenv from 'dotenv';&#10;dotenv.config();&#10;&#10;// DATABASE_URL überprüfen&#10;if (!process.env.DATABASE_URL) {&#10;    throw new Error('DATABASE_URL environment variable is required');&#10;}&#10;&#10;// Neon Client erstellen und dann Drizzle initialisieren&#10;const sql = neon(process.env.DATABASE_URL);&#10;const db = drizzle(sql);&#10;&#10;const app = express();&#10;app.use(express.json());&#10;app.listen(5001, () =&gt; { console.log('Server is running on port 5001'); });&#10;&#10;app.get('/', (req, res) =&gt; {&#10;    res.send('Welcome to the EcoQuest');&#10;});&#10;&#10;/*&#10;app.post('/api/clerk-webhook', async (req, res) =&gt; {&#10;    const event = req.body;&#10;&#10;    if (event.type === 'user.created') {&#10;        const clerkUserId = event.data.id;&#10;&#10;        try {&#10;            // in die users-Tabelle einfügen&#10;            await db.insert(userTable).values({&#10;                id: clerkUserId,&#10;                points: 0,&#10;            });&#10;&#10;            return res.status(200).json({ success: true });&#10;        } catch (err) {&#10;            console.error('Fehler beim Einfügen:', err);&#10;            return res.status(500).json({ error: 'DB insert failed' });&#10;        }&#10;    }&#10;&#10;    res.status(200).json({ received: true });&#10;});*/&#10;&#10;&#10;app.post('/api/user/init', async (req, res) =&gt; {&#10;    const { userId } = req.body;&#10;&#10;    if (!userId) return res.status(400).json({ error: 'No userId provided' });&#10;&#10;    try {&#10;        const existing = await db.select().from(users).where(eq(users.id, userId));&#10;&#10;        if (existing.length === 0) {&#10;            await db.insert(users).values({&#10;                id: userId,&#10;                points: 0,&#10;            });&#10;        }&#10;&#10;        res.status(200).json({ status: 'ok' });&#10;    } catch (err) {&#10;        console.error(err);&#10;        res.status(500).json({ error: 'Database error' });&#10;    }&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/db/schema.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/db/schema.js" />
              <option name="updatedContent" value="import { pgTable, text, integer } from 'drizzle-orm/pg-core';&#10;&#10;export const users = pgTable('users', {&#10;    id: text('id').primaryKey(), // Clerk user ID&#10;    points: integer('points').default(0),&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/index.ts" />
              <option name="originalContent" value="import { drizzle } from 'drizzle-orm/neon-http';&#10;&#10;const db = drizzle(process.env.DATABASE_URL);&#10;" />
              <option name="updatedContent" value="import { drizzle } from 'drizzle-orm/neon-http';&#10;&#10;if (!process.env.DATABASE_URL) {&#10;  throw new Error('DATABASE_URL environment variable is required');&#10;}&#10;&#10;const db = drizzle(process.env.DATABASE_URL);&#10;&#10;export { db };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/InitUser.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/InitUser.tsx" />
              <option name="originalContent" value="import { useUser } from '@clerk/clerk-expo';&#10;import { useEffect } from 'react';&#10;import axios from 'axios';&#10;&#10;export default function InitUser() {&#10;    const { user } = useUser();&#10;&#10;    useEffect(() =&gt; {&#10;        if (user?.id) {&#10;            axios.post('http://localhost:5001/api/user/init', {&#10;                userId: user.id,&#10;            })&#10;                .then(response =&gt; {&#10;                    console.log('User initialized:', response.data);&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Fehler beim Initialisieren des Users:', error);&#10;                });&#10;        }&#10;    }, [user]);&#10;&#10;    return null;&#10;}&#10;" />
              <option name="updatedContent" value="import { useUser } from '@clerk/clerk-expo';&#10;import { useEffect } from 'react';&#10;import axios from 'axios';&#10;&#10;export default function InitUser() {&#10;    const { user } = useUser();&#10;&#10;    useEffect(() =&gt; {&#10;        if (user?.id) {&#10;            axios.post('http://192.168.0.2:5001/api/user/init', {&#10;                userId: user.id,&#10;            })&#10;                .then(response =&gt; {&#10;                    console.log('User initialized:', response.data);&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Fehler beim Initialisieren des Users:', error);&#10;                });&#10;        }&#10;    }, [user?.id]);&#10;&#10;    return null;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/TaskDetail.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/TaskDetail.tsx" />
              <option name="updatedContent" value="import React, { useState, useRef, useEffect } from &quot;react&quot;;&#10;import {&#10;    View,&#10;    Text,&#10;    StyleSheet,&#10;    ScrollView,&#10;    Pressable,&#10;    Animated, Platform,&#10;} from &quot;react-native&quot;;&#10;import Reward from &quot;./Reward&quot;;&#10;import PrimaryButton from &quot;./PrimaryButton&quot;;&#10;import * as Haptics from 'expo-haptics';&#10;import {useToast} from &quot;@/components/ui/toast&quot;;&#10;import ToastExample from &quot;@/components/ToastExample&quot;;&#10;import { useAudioPlayer } from 'expo-audio';&#10;&#10;&#10;interface Step {&#10;    id: string;&#10;    text: string;&#10;    checked?: boolean;&#10;}&#10;&#10;interface TaskDetailProps {&#10;    title: string;&#10;    description: string;&#10;    steps: Step[];&#10;    rewardPoints: number;&#10;}&#10;&#10;const TaskDetail: React.FC&lt;TaskDetailProps&gt; = ({&#10;    title,&#10;    description,&#10;    steps: initialSteps,&#10;    rewardPoints,&#10;}) =&gt; {&#10;    const [steps, setSteps] = useState(initialSteps);&#10;    const scaleAnim = useRef(new Animated.Value(1)).current;&#10;&#10;    const [started, setStarted] = useState(false);&#10;    const [completed, setCompleted] = useState(false);&#10;    const toast = useToast();&#10;    const audioSource = require('../assets/appSound.mp3');&#10;    const player = useAudioPlayer(audioSource);&#10;&#10;    useEffect(() =&gt; {&#10;        if (started &amp;&amp; !completed) {&#10;            Animated.sequence([&#10;                Animated.timing(scaleAnim, {&#10;                    toValue: 1.05,&#10;                    duration: 100,&#10;                    useNativeDriver: true,&#10;                }),&#10;                Animated.timing(scaleAnim, {&#10;                    toValue: 1,&#10;                    duration: 100,&#10;                    useNativeDriver: true,&#10;                }),&#10;            ]).start();&#10;        }&#10;    }, [started, completed, scaleAnim]);&#10;&#10;    const toggleStep = (id: string) =&gt; {&#10;        setSteps(prev =&gt;&#10;            prev.map(step =&gt;&#10;                step.id === id ? { ...step, checked: !step.checked } : step&#10;            )&#10;        );&#10;    };&#10;&#10;    const handlePress = () =&gt; {&#10;        player.seekTo(0);&#10;        player.play();&#10;        const newId = Math.random().toString();&#10;        toast.show({&#10;            id: newId,&#10;            placement:&quot;top&quot;,&#10;            render: ({ id }) =&gt; {&#10;                const toastId = &quot;toast-&quot; + id;&#10;                return (&#10;                    &lt;ToastExample id={toastId}/&gt;&#10;                );&#10;            },&#10;        });&#10;&#10;        if(Platform.OS=== 'ios') {&#10;            Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);&#10;        } else {&#10;            Haptics.performAndroidHapticsAsync(Haptics.AndroidHaptics.Reject);&#10;        }&#10;&#10;        if (!started) {&#10;            setStarted(true);&#10;            setCompleted(false);&#10;        } else if (!completed) {&#10;            setCompleted(true);&#10;            setStarted(false);&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;View style={styles.wrapper}&gt;&#10;            &lt;ScrollView contentContainerStyle={styles.container}&gt;&#10;                &lt;Text style={styles.title}&gt;{title}&lt;/Text&gt;&#10;                &lt;Text style={styles.description}&gt;{description}&lt;/Text&gt;&#10;&#10;                &lt;Text style={styles.sectionTitle}&gt;Schritte: &lt;/Text&gt;&#10;                &lt;View style={styles.stepsContainer}&gt;&#10;                    {steps.map(step =&gt; (&#10;                        &lt;Pressable&#10;                            key={step.id}&#10;                            onPress={() =&gt; toggleStep(step.id)}&#10;                            style={styles.stepItem}&#10;                        &gt;&#10;                            &lt;View style={[styles.checkbox, step.checked &amp;&amp; styles.checked]} /&gt;&#10;                            &lt;Text style={styles.stepText}&gt;{step.text}&lt;/Text&gt;&#10;                        &lt;/Pressable&gt;&#10;                    ))}&#10;                &lt;/View&gt;&#10;&#10;                &lt;Reward points={rewardPoints} /&gt;&#10;            &lt;/ScrollView&gt;&#10;&#10;            &lt;View style={styles.fixedButton}&gt;&#10;                &lt;Animated.View style={{ width: &quot;100%&quot;, transform: [{ scale: scaleAnim }] }}&gt;&#10;                    &lt;PrimaryButton&#10;                        title={started ? &quot;Erledigt&quot; : &quot;Aufgabe starten&quot;}&#10;                        onPressIn={handlePress}&#10;                    /&gt;&#10;                &lt;/Animated.View&gt;&#10;            &lt;/View&gt;&#10;        &lt;/View&gt;&#10;    );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;    wrapper: {&#10;        flex: 1,&#10;        justifyContent: &quot;space-between&quot;,&#10;    },&#10;    container: {&#10;        gap: 20,&#10;        paddingBottom: 100,&#10;    },&#10;    title: {&#10;        fontSize: 22,&#10;        fontWeight: &quot;bold&quot;,&#10;        color: &quot;#0e1a13&quot;,&#10;    },&#10;    description: {&#10;        fontSize: 16,&#10;        color: &quot;#4a635f&quot;,&#10;    },&#10;    sectionTitle: {&#10;        fontSize: 18,&#10;        fontWeight: &quot;bold&quot;,&#10;        color: &quot;#0e1a13&quot;,&#10;        paddingTop: 16,&#10;        paddingBottom: 4,&#10;        paddingHorizontal: 4,&#10;    },&#10;    stepsContainer: {&#10;        gap: 30,&#10;    },&#10;    stepItem: {&#10;        flexDirection: &quot;row&quot;,&#10;        alignItems: &quot;center&quot;,&#10;        gap: 10,&#10;    },&#10;    checkbox: {&#10;        width: 18,&#10;        height: 18,&#10;        borderRadius: 4,&#10;        borderWidth: 2,&#10;        borderColor: &quot;#4a635f&quot;,&#10;    },&#10;    checked: {&#10;        backgroundColor: &quot;#4a635f&quot;,&#10;    },&#10;    stepText: {&#10;        fontSize: 16,&#10;        color: &quot;#0e1a13&quot;,&#10;    },&#10;    fixedButton: {&#10;        position: &quot;absolute&quot;,&#10;        bottom: 60,&#10;        left: 20,&#10;        right: 20,&#10;    },&#10;});&#10;&#10;export default TaskDetail;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/avatar/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/avatar/index.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, ViewProps } from 'react-native';&#10;&#10;interface AvatarProps extends ViewProps {&#10;  children: React.ReactNode;&#10;  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';&#10;}&#10;&#10;interface AvatarImageProps {&#10;  source: { uri: string };&#10;  alt?: string;&#10;}&#10;&#10;interface AvatarFallbackTextProps {&#10;  children: React.ReactNode;&#10;}&#10;&#10;export const Avatar: React.FC&lt;AvatarProps&gt; = ({ children, size = 'md', style, ...props }) =&gt; {&#10;  const sizeMap = {&#10;    xs: 24,&#10;    sm: 32,&#10;    md: 40,&#10;    lg: 48,&#10;    xl: 56&#10;  };&#10;  &#10;  return (&#10;    &lt;View&#10;      style={[&#10;        {&#10;          width: sizeMap[size],&#10;          height: sizeMap[size],&#10;          borderRadius: sizeMap[size] / 2,&#10;          backgroundColor: '#e2e8f0',&#10;          alignItems: 'center',&#10;          justifyContent: 'center',&#10;          overflow: 'hidden'&#10;        },&#10;        style&#10;      ]}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;export const AvatarImage: React.FC&lt;AvatarImageProps&gt; = ({ source, alt }) =&gt; {&#10;  const Image = require('expo-image').Image;&#10;  return (&#10;    &lt;Image&#10;      source={source}&#10;      style={{ width: '100%', height: '100%' }}&#10;      contentFit=&quot;cover&quot;&#10;    /&gt;&#10;  );&#10;};&#10;&#10;export const AvatarFallbackText: React.FC&lt;AvatarFallbackTextProps&gt; = ({ children }) =&gt; {&#10;  const { Text } = require('react-native');&#10;  return (&#10;    &lt;Text style={{ color: '#64748b', fontWeight: '500' }}&gt;&#10;      {children}&#10;    &lt;/Text&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/button/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/button/index.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Button as GluestackButton, ButtonText as GluestackButtonText } from '@gluestack-ui/button';&#10;&#10;export { GluestackButton as Button, GluestackButtonText as ButtonText };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/divider/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/divider/index.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Divider as GluestackDivider } from '@gluestack-ui/divider';&#10;&#10;export { GluestackDivider as Divider };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/heading/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/heading/index.tsx" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/hstack/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/hstack/index.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, ViewProps } from 'react-native';&#10;&#10;interface HStackProps extends ViewProps {&#10;  children: React.ReactNode;&#10;  space?: number;&#10;}&#10;&#10;export const HStack: React.FC&lt;HStackProps&gt; = ({ children, space = 8, style, ...props }) =&gt; {&#10;  return (&#10;    &lt;View&#10;      style={[&#10;        {&#10;          flexDirection: 'row',&#10;          alignItems: 'center',&#10;          gap: space&#10;        },&#10;        style&#10;      ]}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;    &lt;/View&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/icon/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/icon/index.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Icon as LucideIcon } from 'lucide-react-native';&#10;&#10;interface IconProps {&#10;  as: any;&#10;  size?: string | number;&#10;  className?: string;&#10;}&#10;&#10;export const Icon: React.FC&lt;IconProps&gt; = ({ as: IconComponent, size = 24, className, ...props }) =&gt; {&#10;  return &lt;IconComponent size={size} className={className} {...props} /&gt;;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/text/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/text/index.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Text as RNText, TextProps } from 'react-native';&#10;&#10;interface TextComponentProps extends TextProps {&#10;  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';&#10;  children: React.ReactNode;&#10;}&#10;&#10;export const Text: React.FC&lt;TextComponentProps&gt; = ({ size = 'md', style, children, ...props }) =&gt; {&#10;  const sizeMap = {&#10;    xs: 12,&#10;    sm: 14,&#10;    md: 16,&#10;    lg: 18,&#10;    xl: 20&#10;  };&#10;&#10;  return (&#10;    &lt;RNText&#10;      style={[&#10;        {&#10;          fontSize: sizeMap[size],&#10;          color: '#374151'&#10;        },&#10;        style&#10;      ]}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;    &lt;/RNText&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/vstack/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/vstack/index.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, ViewProps } from 'react-native';&#10;&#10;interface VStackProps extends ViewProps {&#10;  children: React.ReactNode;&#10;  space?: number;&#10;}&#10;&#10;export const VStack: React.FC&lt;VStackProps&gt; = ({ children, space = 8, style, ...props }) =&gt; {&#10;  return (&#10;    &lt;View&#10;      style={[&#10;        {&#10;          flexDirection: 'column',&#10;          gap: space&#10;        },&#10;        style&#10;      ]}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;    &lt;/View&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>