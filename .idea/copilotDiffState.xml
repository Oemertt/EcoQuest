<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/taskdetails/[id].tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/taskdetails/[id].tsx" />
              <option name="updatedContent" value="// @ts-nocheck&#10;import React from &quot;react&quot;;&#10;import { StyleSheet, View } from &quot;react-native&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;import { useLocalSearchParams } from &quot;expo-router&quot;;&#10;import Header from &quot;@/components/Header&quot;;&#10;import TaskDetail from &quot;@/components/TaskDetail&quot;;&#10;&#10;const taskdetails = [&#10;    {&#10;        id: &quot;1&quot;,&#10;        title: &quot;Licht ausschalten&quot;,&#10;        description: &quot;Lerne, wie du mit einfachem Ausschalten Energie sparen kannst.&quot;,&#10;        steps: [&#10;            { id: &quot;1&quot;, text: &quot;Licht im Wohnzimmer ausschalten&quot; },&#10;            { id: &quot;2&quot;, text: &quot;Licht in der Küche ausmachen&quot; },&#10;            { id: &quot;3&quot;, text: &quot;Stehlampe vom Strom trennen&quot; },&#10;        ],&#10;        rewardPoints: 10,&#10;    },&#10;    {&#10;        id: &quot;2&quot;,&#10;        title: &quot;Stecker ziehen&quot;,&#10;        description: &quot;Reduziere den Stromverbrauch, indem du Geräte ganz vom Netz nimmst.&quot;,&#10;        steps: [&#10;            { id: &quot;1&quot;, text: &quot;Handyladegerät nach Gebrauch ausstecken&quot; },&#10;            { id: &quot;2&quot;, text: &quot;Kaffeemaschine nach dem Gebrauch ausschalten und Stecker ziehen&quot; },&#10;            { id: &quot;3&quot;, text: &quot;Fernsehgerät oder Konsole über eine Steckerleiste abschalten&quot; },&#10;        ],&#10;        rewardPoints: 15,&#10;    },&#10;    {&#10;        id: &quot;3&quot;,&#10;        title: &quot;Digital Detox&quot;,&#10;        description: &quot;Weniger Streaming und Surfen spart Strom und entlastet Server.&quot;,&#10;        steps: [&#10;            { id: &quot;1&quot;, text: &quot;Einen Tag ohne Social Media ausprobieren&quot; },&#10;            { id: &quot;2&quot;, text: &quot;Streaming-Zeit pro Woche um eine Stunde reduzieren&quot; },&#10;            { id: &quot;3&quot;, text: &quot;Offline-Aktivität wie Spaziergang oder Buchlesen wählen&quot; },&#10;        ],&#10;        rewardPoints: 20,&#10;    },&#10;    {&#10;        id: &quot;4&quot;,&#10;        title: &quot;Kurz duschen&quot;,&#10;        description: &quot;Spare Wasser und Energie, indem du deine Duschzeit reduzierst.&quot;,&#10;        steps: [&#10;            { id: &quot;1&quot;, text: &quot;Duschzeit auf 5 Minuten beschränken&quot; },&#10;            { id: &quot;2&quot;, text: &quot;Wasser während des Einseifens abstellen&quot; },&#10;            { id: &quot;3&quot;, text: &quot;Kalt oder lauwarm duschen probieren&quot; },&#10;        ],&#10;        rewardPoints: 15,&#10;    },&#10;    {&#10;        id: &quot;5&quot;,&#10;        title: &quot;Wasserhahn zudrehen&quot;,&#10;        description: &quot;Vermeide unnötigen Wasserverbrauch im Alltag.&quot;,&#10;        steps: [&#10;            { id: &quot;1&quot;, text: &quot;Wasser beim Zähneputzen zudrehen&quot; },&#10;            { id: &quot;2&quot;, text: &quot;Wasserhahn beim Einseifen der Hände schließen&quot; },&#10;            { id: &quot;3&quot;, text: &quot;Wasserhahn prüfen, ob er richtig zugedreht ist&quot; },&#10;        ],&#10;        rewardPoints: 10,&#10;    },&#10;    {&#10;        id: &quot;6&quot;,&#10;        title: &quot;Regenwasser nutzen&quot;,&#10;        description: &quot;Spare Trinkwasser, indem du Regenwasser sammelst.&quot;,&#10;        steps: [&#10;            { id: &quot;1&quot;, text: &quot;Regenfass im Garten aufstellen&quot; },&#10;            { id: &quot;2&quot;, text: &quot;Regenwasser für Pflanzen nutzen&quot; },&#10;            { id: &quot;3&quot;, text: &quot;Regenwasser statt Leitungswasser für Autowäsche verwenden&quot; },&#10;        ],&#10;        rewardPoints: 25,&#10;    },&#10;    {&#10;        id: &quot;7&quot;,&#10;        title: &quot;Fahrrad nutzen&quot;,&#10;        description: &quot;Lege kurze Strecken mit dem Rad zurück, um CO₂ zu sparen.&quot;,&#10;        steps: [&#10;            { id: &quot;1&quot;, text: &quot;Einkauf mit dem Fahrrad statt mit dem Auto erledigen&quot; },&#10;            { id: &quot;2&quot;, text: &quot;Täglichen Arbeitsweg mit dem Rad fahren (falls möglich)&quot; },&#10;            { id: &quot;3&quot;, text: &quot;Freizeitwege mit dem Rad planen&quot; },&#10;        ],&#10;        rewardPoints: 30,&#10;    },&#10;    {&#10;        id: &quot;8&quot;,&#10;        title: &quot;Öffentliche Verkehrsmittel nutzen&quot;,&#10;        description: &quot;Nutze Bus oder Bahn, um CO₂ zu reduzieren.&quot;,&#10;        steps: [&#10;            { id: &quot;1&quot;, text: &quot;Wochenkarte oder Ticket kaufen&quot; },&#10;            { id: &quot;2&quot;, text: &quot;Kurze Fahrten mit Bus statt Auto machen&quot; },&#10;            { id: &quot;3&quot;, text: &quot;Fahrgemeinschaft mit Öffis kombinieren&quot; },&#10;        ],&#10;        rewardPoints: 25,&#10;    },&#10;    {&#10;        id: &quot;9&quot;,&#10;        title: &quot;Mülltrennung&quot;,&#10;        description: &quot;Sortiere Abfälle richtig, um Recycling zu ermöglichen.&quot;,&#10;        steps: [&#10;            { id: &quot;1&quot;, text: &quot;Bioabfälle in den Biomüll werfen&quot; },&#10;            { id: &quot;2&quot;, text: &quot;Plastik und Verpackungen in die Gelbe Tonne geben&quot; },&#10;            { id: &quot;3&quot;, text: &quot;Papier und Glas getrennt entsorgen&quot; },&#10;        ],&#10;        rewardPoints: 20,&#10;    },&#10;    {&#10;        id: &quot;10&quot;,&#10;        title: &quot;Upcycling machen&quot;,&#10;        description: &quot;Verwende alte Dinge kreativ neu.&quot;,&#10;        steps: [&#10;            { id: &quot;1&quot;, text: &quot;Altes Glas als Vase nutzen&quot; },&#10;            { id: &quot;2&quot;, text: &quot;T-Shirt in einen Putzlappen umfunktionieren&quot; },&#10;            { id: &quot;3&quot;, text: &quot;Alte Möbel neu bemalen oder umbauen&quot; },&#10;        ],&#10;        rewardPoints: 30,&#10;    },&#10;    {&#10;        id: &quot;11&quot;,&#10;        title: &quot;Mehrweg statt Einweg&quot;,&#10;        description: &quot;Nutze wiederverwendbare Alternativen.&quot;,&#10;        steps: [&#10;            { id: &quot;1&quot;, text: &quot;Stofftasche beim Einkauf mitnehmen&quot; },&#10;            { id: &quot;2&quot;, text: &quot;Eigene Trinkflasche auffüllen statt Plastikflasche kaufen&quot; },&#10;            { id: &quot;3&quot;, text: &quot;Brotdose statt Alufolie oder Plastiktüte nutzen&quot; },&#10;        ],&#10;        rewardPoints: 15,&#10;    },&#10;    {&#10;        id: &quot;12&quot;,&#10;        title: &quot;Gemüse anbauen&quot;,&#10;        description: &quot;Pflanze eigenes Gemüse oder Kräuter für frische Mahlzeiten.&quot;,&#10;        steps: [&#10;            { id: &quot;1&quot;, text: &quot;Tomatensamen in einem Topf einsetzen&quot; },&#10;            { id: &quot;2&quot;, text: &quot;Kräuter wie Basilikum oder Petersilie auf der Fensterbank ziehen&quot; },&#10;            { id: &quot;3&quot;, text: &quot;Gemüse regelmäßig gießen und pflegen&quot; },&#10;        ],&#10;        rewardPoints: 25,&#10;    },&#10;    {&#10;        id: &quot;13&quot;,&#10;        title: &quot;Pflanzen für Natur &amp; Artenvielfalt setzen&quot;,&#10;        description: &quot;Unterstütze die Umwelt durch das Pflanzen von Bäumen und Blumen.&quot;,&#10;        steps: [&#10;            { id: &quot;1&quot;, text: &quot;Bienenfreundliche Blumen im Garten pflanzen&quot; },&#10;            { id: &quot;2&quot;, text: &quot;Einen kleinen Baum oder Strauch setzen&quot; },&#10;            { id: &quot;3&quot;, text: &quot;Pflanzen regelmäßig pflegen&quot; },&#10;        ],&#10;        rewardPoints: 35,&#10;    },&#10;    {&#10;        id: &quot;14&quot;,&#10;        title: &quot;Regional &amp; saisonal einkaufen&quot;,&#10;        description: &quot;Kaufe Lebensmittel aus der Region und zur richtigen Jahreszeit.&quot;,&#10;        steps: [&#10;            { id: &quot;1&quot;, text: &quot;Wochenmarkt in deiner Nähe besuchen&quot; },&#10;            { id: &quot;2&quot;, text: &quot;Obst und Gemüse nach Saison kaufen&quot; },&#10;            { id: &quot;3&quot;, text: &quot;Unverpackte Lebensmittel bevorzugen&quot; },&#10;        ],&#10;        rewardPoints: 20,&#10;    },&#10;    {&#10;        id: &quot;15&quot;,&#10;        title: &quot;Second Hand kaufen&quot;,&#10;        description: &quot;Verwende gebrauchte Artikel und verlängere ihren Lebenszyklus.&quot;,&#10;        steps: [&#10;            { id: &quot;1&quot;, text: &quot;Second-Hand-Laden besuchen&quot; },&#10;            { id: &quot;2&quot;, text: &quot;Online-Plattformen für gebrauchte Kleidung nutzen&quot; },&#10;            { id: &quot;3&quot;, text: &quot;Möbel oder Geräte gebraucht kaufen&quot; },&#10;        ],&#10;        rewardPoints: 25,&#10;    },&#10;];&#10;&#10;const TaskDetailScreen = () =&gt; {&#10;    const { id } = useLocalSearchParams();&#10;    const taskIndex = parseInt(id as string) - 1;&#10;    const task = taskdetails[taskIndex];&#10;    &#10;    if (!task) {&#10;        return (&#10;            &lt;SafeAreaView edges={[&quot;top&quot;]} style={styles.container}&gt;&#10;                &lt;Header title=&quot;Aufgabe nicht gefunden&quot; /&gt;&#10;            &lt;/SafeAreaView&gt;&#10;        );&#10;    }&#10;    &#10;    return (&#10;        &lt;SafeAreaView edges={[&quot;top&quot;]} style={styles.container}&gt;&#10;            &lt;Header title=&quot;Aufgabe&quot; /&gt;&#10;&#10;            &lt;View style={styles.content}&gt;&#10;                &lt;TaskDetail&#10;                    title={task.title}&#10;                    description={task.description}&#10;                    steps={task.steps}&#10;                    rewardPoints={task.rewardPoints}&#10;                /&gt;&#10;            &lt;/View&gt;&#10;        &lt;/SafeAreaView&gt;&#10;    );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;    container: {&#10;        flex: 1,&#10;        backgroundColor: &quot;#f9fbfa&quot;,&#10;        paddingHorizontal: 16,&#10;    },&#10;    content: {&#10;        flex: 1,&#10;        marginTop: 16,&#10;    },&#10;    trophyWrapper: {&#10;        marginBottom: 24,&#10;        alignItems: &quot;center&quot;,&#10;    },&#10;    trophyText: {&#10;        marginTop: 8,&#10;        fontSize: 18,&#10;        fontWeight: &quot;600&quot;,&#10;        color: &quot;#f0a500&quot;,&#10;    },&#10;});&#10;&#10;export default TaskDetailScreen;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/TaskContainer.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/TaskContainer.tsx" />
              <option name="originalContent" value="import React from &quot;react&quot;;&#10;import { StyleSheet, Text, View } from &quot;react-native&quot;;&#10;import TaskCard from &quot;./TaskCard&quot;;&#10;import {FlashList} from &quot;@shopify/flash-list&quot;;&#10;import {router} from &quot;expo-router&quot;;&#10;&#10;interface Task {&#10;    id: string;&#10;    title: string;&#10;    subtitle: string;&#10;    imageUrl: string | any;&#10;    onPress?: () =&gt; void;   // onPress ist optional, falls gewünscht&#10;}&#10;&#10;interface TaskContainerProps {&#10;    title: string;&#10;    tasks: Task[];&#10;}&#10;&#10;const TaskContainer: React.FC&lt;TaskContainerProps&gt; = ({ title, tasks, }) =&gt; {&#10;    return (&#10;        &lt;View style={styles.container}&gt;&#10;            &lt;Text style={styles.title}&gt;{title}&lt;/Text&gt;&#10;&#10;            {/* Task cards */}&#10;            &lt;FlashList data={tasks} renderItem={({ item }) =&gt; (&#10;                    &lt;TaskCard&#10;                        key={item.id}&#10;                        title={item.title}&#10;                        subtitle={item.subtitle}&#10;                        imageUrl={item.imageUrl}&#10;                        onStart={ () =&gt; router.push(`./taskdetail/${item.id}`) }&#10;                    /&gt;&#10;                )}&#10;            /&gt;&#10;        &lt;/View&gt;&#10;    );&#10;};&#10;&#10;&#10;&#10;const styles = StyleSheet.create({&#10;    container: {&#10;        marginBottom: 6,&#10;        paddingHorizontal: 16,&#10;        backgroundColor: &quot;#f9fbfa&quot;,&#10;    },&#10;    title: {&#10;        fontSize: 24,&#10;        fontWeight: &quot;bold&quot;,&#10;        color: &quot;#101914&quot;,&#10;        marginBottom: 18,&#10;    },&#10;    cardWrapper: {&#10;        marginBottom: 10,&#10;    },&#10;});&#10;&#10;export default TaskContainer;&#10;" />
              <option name="updatedContent" value="import React from &quot;react&quot;;&#10;import { StyleSheet, Text, View } from &quot;react-native&quot;;&#10;import TaskCard from &quot;./TaskCard&quot;;&#10;import {FlashList} from &quot;@shopify/flash-list&quot;;&#10;import {router} from &quot;expo-router&quot;;&#10;&#10;interface Task {&#10;    id: string;&#10;    title: string;&#10;    subtitle: string;&#10;    imageUrl: string | any;&#10;    onPress?: () =&gt; void;   // onPress ist optional, falls gewünscht&#10;}&#10;&#10;interface TaskContainerProps {&#10;    title: string;&#10;    tasks: Task[];&#10;}&#10;&#10;const TaskContainer: React.FC&lt;TaskContainerProps&gt; = ({ title, tasks, }) =&gt; {&#10;    return (&#10;        &lt;View style={styles.container}&gt;&#10;            &lt;Text style={styles.title}&gt;{title}&lt;/Text&gt;&#10;&#10;            {/* Task cards */}&#10;            &lt;FlashList data={tasks} renderItem={({ item }) =&gt; (&#10;                    &lt;TaskCard&#10;                        key={item.id}&#10;                        title={item.title}&#10;                        subtitle={item.subtitle}&#10;                        imageUrl={item.imageUrl}&#10;                        onStart={ () =&gt; router.push(`./taskdetails/${item.id}`) }&#10;                    /&gt;&#10;                )}&#10;            /&gt;&#10;        &lt;/View&gt;&#10;    );&#10;};&#10;&#10;&#10;&#10;const styles = StyleSheet.create({&#10;    container: {&#10;        marginBottom: 6,&#10;        paddingHorizontal: 16,&#10;        backgroundColor: &quot;#f9fbfa&quot;,&#10;    },&#10;    title: {&#10;        fontSize: 24,&#10;        fontWeight: &quot;bold&quot;,&#10;        color: &quot;#101914&quot;,&#10;        marginBottom: 18,&#10;    },&#10;    cardWrapper: {&#10;        marginBottom: 10,&#10;    },&#10;});&#10;&#10;export default TaskContainer;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/babel.config.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/babel.config.js" />
              <option name="originalContent" value="module.exports = function (api) {&#10;  api.cache(true);&#10;  api.cache(true);&#10;  return {&#10;    presets: [&#10;      [&quot;babel-preset-expo&quot;, { jsxImportSource: &quot;nativewind&quot; }],&#10;      &quot;nativewind/babel&quot;,&#10;      &quot;nativewind/babel&quot;&#10;    ],&#10;&#10;    plugins: [[&quot;module-resolver&quot;, {&#10;      root: [&quot;./&quot;],&#10;&#10;      alias: {&#10;        &quot;@&quot;: &quot;./&quot;,&#10;        &quot;tailwind.config&quot;: &quot;./tailwind.config.js&quot;&#10;      }&#10;    }]]&#10;  };&#10;};&#10;" />
              <option name="updatedContent" value="module.exports = function (api) {&#10;  api.cache(true);&#10;  return {&#10;    presets: [&#10;      [&quot;babel-preset-expo&quot;, { jsxImportSource: &quot;nativewind&quot; }],&#10;      &quot;nativewind/babel&quot;&#10;    ],&#10;&#10;    plugins: [[&quot;module-resolver&quot;, {&#10;      root: [&quot;./&quot;],&#10;&#10;      alias: {&#10;        &quot;@&quot;: &quot;./&quot;,&#10;        &quot;tailwind.config&quot;: &quot;./tailwind.config.js&quot;&#10;      }&#10;    }]]&#10;  };&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/server.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/server.js" />
              <option name="originalContent" value="import express from 'express';&#10;import { drizzle } from 'drizzle-orm/neon-http';&#10;import { neon } from '@neondatabase/serverless';&#10;import { eq } from 'drizzle-orm';&#10;import { users } from './src/db/schema.js';&#10;import dotenv from 'dotenv';&#10;dotenv.config();&#10;&#10;// DATABASE_URL überprüfen&#10;if (!process.env.DATABASE_URL) {&#10;    throw new Error('DATABASE_URL environment variable is required');&#10;}&#10;&#10;// Neon Client erstellen und dann Drizzle initialisieren&#10;const sql = neon(process.env.DATABASE_URL);&#10;const db = drizzle(sql);&#10;&#10;const app = express();&#10;app.use(express.json());&#10;app.listen(5001, () =&gt; { console.log('Server is running on port 5001'); });&#10;&#10;app.get('/', (req, res) =&gt; {&#10;    res.send('Welcome to the EcoQuest');&#10;});&#10;&#10;/*&#10;app.post('/api/clerk-webhook', async (req, res) =&gt; {&#10;    const event = req.body;&#10;&#10;    if (event.type === 'user.created') {&#10;        const clerkUserId = event.data.id;&#10;&#10;        try {&#10;            // in die users-Tabelle einfügen&#10;            await db.insert(userTable).values({&#10;                id: clerkUserId,&#10;                points: 0,&#10;            });&#10;&#10;            return res.status(200).json({ success: true });&#10;        } catch (err) {&#10;            console.error('Fehler beim Einfügen:', err);&#10;            return res.status(500).json({ error: 'DB insert failed' });&#10;        }&#10;    }&#10;&#10;    res.status(200).json({ received: true });&#10;});*/&#10;&#10;&#10;app.post('/api/user/init', async (req, res) =&gt; {&#10;    const { userId } = req.body;&#10;&#10;    if (!userId) return res.status(400).json({ error: 'No userId provided' });&#10;&#10;    try {&#10;        const existing = await db.select().from(users).where(users.id.eq(userId));&#10;&#10;        if (existing.length === 0) {&#10;            await db.insert(users).values({&#10;                id: userId,&#10;                points: 0,&#10;            });&#10;        }&#10;&#10;        res.status(200).json({ status: 'ok' });&#10;    } catch (err) {&#10;        console.error(err);&#10;        res.status(500).json({ error: 'Database error' });&#10;    }&#10;});&#10;" />
              <option name="updatedContent" value="import express from 'express';&#10;import { drizzle } from 'drizzle-orm/neon-http';&#10;import { neon } from '@neondatabase/serverless';&#10;import { eq } from 'drizzle-orm';&#10;import { users } from './src/db/schema.js';&#10;import dotenv from 'dotenv';&#10;dotenv.config();&#10;&#10;// DATABASE_URL überprüfen&#10;if (!process.env.DATABASE_URL) {&#10;    throw new Error('DATABASE_URL environment variable is required');&#10;}&#10;&#10;// Neon Client erstellen und dann Drizzle initialisieren&#10;const sql = neon(process.env.DATABASE_URL);&#10;const db = drizzle(sql);&#10;&#10;const app = express();&#10;app.use(express.json());&#10;app.listen(5001, () =&gt; { console.log('Server is running on port 5001'); });&#10;&#10;app.get('/', (req, res) =&gt; {&#10;    res.send('Welcome to the EcoQuest');&#10;});&#10;&#10;/*&#10;app.post('/api/clerk-webhook', async (req, res) =&gt; {&#10;    const event = req.body;&#10;&#10;    if (event.type === 'user.created') {&#10;        const clerkUserId = event.data.id;&#10;&#10;        try {&#10;            // in die users-Tabelle einfügen&#10;            await db.insert(userTable).values({&#10;                id: clerkUserId,&#10;                points: 0,&#10;            });&#10;&#10;            return res.status(200).json({ success: true });&#10;        } catch (err) {&#10;            console.error('Fehler beim Einfügen:', err);&#10;            return res.status(500).json({ error: 'DB insert failed' });&#10;        }&#10;    }&#10;&#10;    res.status(200).json({ received: true });&#10;});*/&#10;&#10;&#10;app.post('/api/user/init', async (req, res) =&gt; {&#10;    const { userId } = req.body;&#10;&#10;    if (!userId) return res.status(400).json({ error: 'No userId provided' });&#10;&#10;    try {&#10;        const existing = await db.select().from(users).where(eq(users.id, userId));&#10;&#10;        if (existing.length === 0) {&#10;            await db.insert(users).values({&#10;                id: userId,&#10;                points: 0,&#10;            });&#10;        }&#10;&#10;        res.status(200).json({ status: 'ok' });&#10;    } catch (err) {&#10;        console.error(err);&#10;        res.status(500).json({ error: 'Database error' });&#10;    }&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/db/schema.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/db/schema.js" />
              <option name="updatedContent" value="import { pgTable, text, integer } from 'drizzle-orm/pg-core';&#10;&#10;export const users = pgTable('users', {&#10;    id: text('id').primaryKey(), // Clerk user ID&#10;    points: integer('points').default(0),&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/index.ts" />
              <option name="originalContent" value="import { drizzle } from 'drizzle-orm/neon-http';&#10;&#10;const db = drizzle(process.env.DATABASE_URL);&#10;" />
              <option name="updatedContent" value="import { drizzle } from 'drizzle-orm/neon-http';&#10;&#10;if (!process.env.DATABASE_URL) {&#10;  throw new Error('DATABASE_URL environment variable is required');&#10;}&#10;&#10;const db = drizzle(process.env.DATABASE_URL);&#10;&#10;export { db };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/InitUser.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/InitUser.tsx" />
              <option name="originalContent" value="import { useUser } from '@clerk/clerk-expo';&#10;import { useEffect } from 'react';&#10;import axios from 'axios';&#10;&#10;export default function InitUser() {&#10;    const { user } = useUser();&#10;&#10;    useEffect(() =&gt; {&#10;        if (user?.id) {&#10;            axios.post('http://localhost:5001/api/user/init', {&#10;                userId: user.id,&#10;            })&#10;                .then(response =&gt; {&#10;                    console.log('User initialized:', response.data);&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Fehler beim Initialisieren des Users:', error);&#10;                });&#10;        }&#10;    }, [user]);&#10;&#10;    return null;&#10;}&#10;" />
              <option name="updatedContent" value="import { useUser } from '@clerk/clerk-expo';&#10;import { useEffect } from 'react';&#10;import axios from 'axios';&#10;&#10;export default function InitUser() {&#10;    const { user } = useUser();&#10;&#10;    useEffect(() =&gt; {&#10;        if (user?.id) {&#10;            axios.post('http://192.168.0.2:5001/api/user/init', {&#10;                userId: user.id,&#10;            })&#10;                .then(response =&gt; {&#10;                    console.log('User initialized:', response.data);&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Fehler beim Initialisieren des Users:', error);&#10;                });&#10;        }&#10;    }, [user?.id]);&#10;&#10;    return null;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/TaskDetail.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/TaskDetail.tsx" />
              <option name="updatedContent" value="import React, { useState, useRef, useEffect } from &quot;react&quot;;&#10;import {&#10;    View,&#10;    Text,&#10;    StyleSheet,&#10;    ScrollView,&#10;    Pressable,&#10;    Animated, Platform,&#10;} from &quot;react-native&quot;;&#10;import Reward from &quot;./Reward&quot;;&#10;import PrimaryButton from &quot;./PrimaryButton&quot;;&#10;import * as Haptics from 'expo-haptics';&#10;import {useToast} from &quot;@/components/ui/toast&quot;;&#10;import ToastExample from &quot;@/components/ToastExample&quot;;&#10;import { useAudioPlayer } from 'expo-audio';&#10;&#10;&#10;interface Step {&#10;    id: string;&#10;    text: string;&#10;    checked?: boolean;&#10;}&#10;&#10;interface TaskDetailProps {&#10;    title: string;&#10;    description: string;&#10;    steps: Step[];&#10;    rewardPoints: number;&#10;}&#10;&#10;const TaskDetail: React.FC&lt;TaskDetailProps&gt; = ({&#10;    title,&#10;    description,&#10;    steps: initialSteps,&#10;    rewardPoints,&#10;}) =&gt; {&#10;    const [steps, setSteps] = useState(initialSteps);&#10;    const scaleAnim = useRef(new Animated.Value(1)).current;&#10;&#10;    const [started, setStarted] = useState(false);&#10;    const [completed, setCompleted] = useState(false);&#10;    const toast = useToast();&#10;    const audioSource = require('../assets/appSound.mp3');&#10;    const player = useAudioPlayer(audioSource);&#10;&#10;    useEffect(() =&gt; {&#10;        if (started &amp;&amp; !completed) {&#10;            Animated.sequence([&#10;                Animated.timing(scaleAnim, {&#10;                    toValue: 1.05,&#10;                    duration: 100,&#10;                    useNativeDriver: true,&#10;                }),&#10;                Animated.timing(scaleAnim, {&#10;                    toValue: 1,&#10;                    duration: 100,&#10;                    useNativeDriver: true,&#10;                }),&#10;            ]).start();&#10;        }&#10;    }, [started, completed, scaleAnim]);&#10;&#10;    const toggleStep = (id: string) =&gt; {&#10;        setSteps(prev =&gt;&#10;            prev.map(step =&gt;&#10;                step.id === id ? { ...step, checked: !step.checked } : step&#10;            )&#10;        );&#10;    };&#10;&#10;    const handlePress = () =&gt; {&#10;        player.seekTo(0);&#10;        player.play();&#10;        const newId = Math.random().toString();&#10;        toast.show({&#10;            id: newId,&#10;            placement:&quot;top&quot;,&#10;            render: ({ id }) =&gt; {&#10;                const toastId = &quot;toast-&quot; + id;&#10;                return (&#10;                    &lt;ToastExample id={toastId}/&gt;&#10;                );&#10;            },&#10;        });&#10;&#10;        if(Platform.OS=== 'ios') {&#10;            Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);&#10;        } else {&#10;            Haptics.performAndroidHapticsAsync(Haptics.AndroidHaptics.Reject);&#10;        }&#10;&#10;        if (!started) {&#10;            setStarted(true);&#10;            setCompleted(false);&#10;        } else if (!completed) {&#10;            setCompleted(true);&#10;            setStarted(false);&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;View style={styles.wrapper}&gt;&#10;            &lt;ScrollView contentContainerStyle={styles.container}&gt;&#10;                &lt;Text style={styles.title}&gt;{title}&lt;/Text&gt;&#10;                &lt;Text style={styles.description}&gt;{description}&lt;/Text&gt;&#10;&#10;                &lt;Text style={styles.sectionTitle}&gt;Schritte: &lt;/Text&gt;&#10;                &lt;View style={styles.stepsContainer}&gt;&#10;                    {steps.map(step =&gt; (&#10;                        &lt;Pressable&#10;                            key={step.id}&#10;                            onPress={() =&gt; toggleStep(step.id)}&#10;                            style={styles.stepItem}&#10;                        &gt;&#10;                            &lt;View style={[styles.checkbox, step.checked &amp;&amp; styles.checked]} /&gt;&#10;                            &lt;Text style={styles.stepText}&gt;{step.text}&lt;/Text&gt;&#10;                        &lt;/Pressable&gt;&#10;                    ))}&#10;                &lt;/View&gt;&#10;&#10;                &lt;Reward points={rewardPoints} /&gt;&#10;            &lt;/ScrollView&gt;&#10;&#10;            &lt;View style={styles.fixedButton}&gt;&#10;                &lt;Animated.View style={{ width: &quot;100%&quot;, transform: [{ scale: scaleAnim }] }}&gt;&#10;                    &lt;PrimaryButton&#10;                        title={started ? &quot;Erledigt&quot; : &quot;Aufgabe starten&quot;}&#10;                        onPressIn={handlePress}&#10;                    /&gt;&#10;                &lt;/Animated.View&gt;&#10;            &lt;/View&gt;&#10;        &lt;/View&gt;&#10;    );&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;    wrapper: {&#10;        flex: 1,&#10;        justifyContent: &quot;space-between&quot;,&#10;    },&#10;    container: {&#10;        gap: 20,&#10;        paddingBottom: 100,&#10;    },&#10;    title: {&#10;        fontSize: 22,&#10;        fontWeight: &quot;bold&quot;,&#10;        color: &quot;#0e1a13&quot;,&#10;    },&#10;    description: {&#10;        fontSize: 16,&#10;        color: &quot;#4a635f&quot;,&#10;    },&#10;    sectionTitle: {&#10;        fontSize: 18,&#10;        fontWeight: &quot;bold&quot;,&#10;        color: &quot;#0e1a13&quot;,&#10;        paddingTop: 16,&#10;        paddingBottom: 4,&#10;        paddingHorizontal: 4,&#10;    },&#10;    stepsContainer: {&#10;        gap: 30,&#10;    },&#10;    stepItem: {&#10;        flexDirection: &quot;row&quot;,&#10;        alignItems: &quot;center&quot;,&#10;        gap: 10,&#10;    },&#10;    checkbox: {&#10;        width: 18,&#10;        height: 18,&#10;        borderRadius: 4,&#10;        borderWidth: 2,&#10;        borderColor: &quot;#4a635f&quot;,&#10;    },&#10;    checked: {&#10;        backgroundColor: &quot;#4a635f&quot;,&#10;    },&#10;    stepText: {&#10;        fontSize: 16,&#10;        color: &quot;#0e1a13&quot;,&#10;    },&#10;    fixedButton: {&#10;        position: &quot;absolute&quot;,&#10;        bottom: 60,&#10;        left: 20,&#10;        right: 20,&#10;    },&#10;});&#10;&#10;export default TaskDetail;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/avatar/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/avatar/index.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, ViewProps } from 'react-native';&#10;&#10;interface AvatarProps extends ViewProps {&#10;  children: React.ReactNode;&#10;  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';&#10;}&#10;&#10;interface AvatarImageProps {&#10;  source: { uri: string };&#10;  alt?: string;&#10;}&#10;&#10;interface AvatarFallbackTextProps {&#10;  children: React.ReactNode;&#10;}&#10;&#10;export const Avatar: React.FC&lt;AvatarProps&gt; = ({ children, size = 'md', style, ...props }) =&gt; {&#10;  const sizeMap = {&#10;    xs: 24,&#10;    sm: 32,&#10;    md: 40,&#10;    lg: 48,&#10;    xl: 56&#10;  };&#10;  &#10;  return (&#10;    &lt;View&#10;      style={[&#10;        {&#10;          width: sizeMap[size],&#10;          height: sizeMap[size],&#10;          borderRadius: sizeMap[size] / 2,&#10;          backgroundColor: '#e2e8f0',&#10;          alignItems: 'center',&#10;          justifyContent: 'center',&#10;          overflow: 'hidden'&#10;        },&#10;        style&#10;      ]}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;    &lt;/View&gt;&#10;  );&#10;};&#10;&#10;export const AvatarImage: React.FC&lt;AvatarImageProps&gt; = ({ source, alt }) =&gt; {&#10;  const Image = require('expo-image').Image;&#10;  return (&#10;    &lt;Image&#10;      source={source}&#10;      style={{ width: '100%', height: '100%' }}&#10;      contentFit=&quot;cover&quot;&#10;    /&gt;&#10;  );&#10;};&#10;&#10;export const AvatarFallbackText: React.FC&lt;AvatarFallbackTextProps&gt; = ({ children }) =&gt; {&#10;  const { Text } = require('react-native');&#10;  return (&#10;    &lt;Text style={{ color: '#64748b', fontWeight: '500' }}&gt;&#10;      {children}&#10;    &lt;/Text&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/button/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/button/index.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Button as GluestackButton, ButtonText as GluestackButtonText } from '@gluestack-ui/button';&#10;&#10;export { GluestackButton as Button, GluestackButtonText as ButtonText };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/divider/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/divider/index.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Divider as GluestackDivider } from '@gluestack-ui/divider';&#10;&#10;export { GluestackDivider as Divider };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/heading/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/heading/index.tsx" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/hstack/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/hstack/index.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, ViewProps } from 'react-native';&#10;&#10;interface HStackProps extends ViewProps {&#10;  children: React.ReactNode;&#10;  space?: number;&#10;}&#10;&#10;export const HStack: React.FC&lt;HStackProps&gt; = ({ children, space = 8, style, ...props }) =&gt; {&#10;  return (&#10;    &lt;View&#10;      style={[&#10;        {&#10;          flexDirection: 'row',&#10;          alignItems: 'center',&#10;          gap: space&#10;        },&#10;        style&#10;      ]}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;    &lt;/View&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/icon/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/icon/index.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Icon as LucideIcon } from 'lucide-react-native';&#10;&#10;interface IconProps {&#10;  as: any;&#10;  size?: string | number;&#10;  className?: string;&#10;}&#10;&#10;export const Icon: React.FC&lt;IconProps&gt; = ({ as: IconComponent, size = 24, className, ...props }) =&gt; {&#10;  return &lt;IconComponent size={size} className={className} {...props} /&gt;;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/text/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/text/index.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Text as RNText, TextProps } from 'react-native';&#10;&#10;interface TextComponentProps extends TextProps {&#10;  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';&#10;  children: React.ReactNode;&#10;}&#10;&#10;export const Text: React.FC&lt;TextComponentProps&gt; = ({ size = 'md', style, children, ...props }) =&gt; {&#10;  const sizeMap = {&#10;    xs: 12,&#10;    sm: 14,&#10;    md: 16,&#10;    lg: 18,&#10;    xl: 20&#10;  };&#10;&#10;  return (&#10;    &lt;RNText&#10;      style={[&#10;        {&#10;          fontSize: sizeMap[size],&#10;          color: '#374151'&#10;        },&#10;        style&#10;      ]}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;    &lt;/RNText&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/vstack/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/vstack/index.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, ViewProps } from 'react-native';&#10;&#10;interface VStackProps extends ViewProps {&#10;  children: React.ReactNode;&#10;  space?: number;&#10;}&#10;&#10;export const VStack: React.FC&lt;VStackProps&gt; = ({ children, space = 8, style, ...props }) =&gt; {&#10;  return (&#10;    &lt;View&#10;      style={[&#10;        {&#10;          flexDirection: 'column',&#10;          gap: space&#10;        },&#10;        style&#10;      ]}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;    &lt;/View&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>